#!/usr/bin/env ruby
# frozen_string_literal: true
#
# To update this script, please update in github.com/truecoach/ops/circleci via
# pull request, then copy-paste the updated version here.
#
# # DESCRIPTION # #
#
# Transitions Pivotal Tracker story states based on a git branch flow of
#   feature      -> develop     -> master
#   (started)    -> (delivered) -> (accepted)
#   (in process) -> (merged)    -> (deployed)
#
require 'json'
require 'slack-notifier'
require_relative './circle_ci_git_inspector'

class PivotalTransitioner
  PIVOTAL_STATES = [
    ACCEPTED = 'accepted',
    DELIVERED = 'delivered',
    FINISHED = 'finished',
    STARTED = 'started',
    REJECTED = 'rejected',
    PLANNED = 'planned',
    UNSTARTED = 'unstarted',
    UNSCHEDULED = 'unscheduled',
  ].freeze
  PIVOTAL_STORY_TYPES = [
    FEATURE = 'feature',
    BUG = 'bug',
    CHORE = 'chore'
  ].freeze

  def self.call
    new.call
  end

  def call
    pt_stories.each do |story|
      transition(story)
    end
  end

  private

  def transition(story)
    form = {
      current_state: current_state
    }.to_json

    response =`
      curl -X PUT \
        -H "X-TrackerToken: $PIVOTAL_TRACKER_API_TOKEN" \
        -H "Content-Type: application/json" \
        -d '#{form}' \
        #{pt_url(story["id"])}
    `

    puts ""
    puts "Transitioned story #{story["id"]} to #{current_state}"
    puts ""
    puts response
    puts ""
  end

  def current_state
    return ACCEPTED if git.deployed?
    return DELIVERED if git.merged?
    return FINISHED if git.pr_exists?

    STARTED
  end

  def pt_stories
    @_pt_stories ||= begin
      pt_story_ids.map do |id|
        story = `
          curl -X GET \
            -H "X-TrackerToken: $PIVOTAL_TRACKER_API_TOKEN" \
            #{pt_url(id)}
        `
        story = JSON.parse(story)

        story["kind"] == "error" ? nil : story
      end.compact
    end
  end

  def pt_url(id)
    "https://www.pivotaltracker.com/services/v5/stories/#{id}"
  end

  def pt_story_ids
    @_pt_story_ids ||= begin
      # expected format in commit message:
      # [ ... #1234 ... ]
      git.commit_messages
        .scan(/\[(.*?#\d+.*?)\]/)
        .flatten
        .map { |t| t[/#\d+/].gsub(/#/, '') }
    end
  end

  def git
    @_git ||= CircleCiGitInspector.new
  end
end

PivotalTransitioner.call
